name: 'Linting and Styling'

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint-style:
    name: Linting and Styling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Cache Poetry
        id: cache-poetry
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/.poetry
          key: poetry-self-lint-${{ hashFiles('.github/workflows/lint.yml') }}
          restore-keys: poetry-self-lint-

      - name: Install Poetry
        if: steps.cache-poetry.outputs.cache-hit != 'true'
        run: |
          export POETRY_HOME=${{github.workspace}}/.poetry
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py -O
          python install-poetry.py --preview
          rm install-poetry.py
      - name: Add Poetry to $PATH
        run: echo "${{github.workspace}}/.poetry/bin" >> $GITHUB_PATH

      - name: Add poethepoet plugin
        run: poetry self add 'poethepoet[poetry_plugin]'

      - name: Poetry Version
        run: poetry --version

      - name: Check pyproject.toml validity
        run: poetry check --no-interaction

      - name: Cache Dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ${{github.workspace}}/.venv
          key: poetry-deps-lint-${{ hashFiles('**/poetry.lock') }}
          restore-keys: poetry-deps-lint-

      - name: Install Deps
        if: steps.cache-deps.cache-hit != 'true'
        run: |
          poetry config virtualenvs.in-project true
          poetry install --no-interaction

      - name: Run Styling Enforcement
        run: poetry poe check

      # TODO: As soon as the repo is in a state to enable this, we'll do so.
      # - name: Run Style Linting Enforcement
      #   run: poetry poe lint
